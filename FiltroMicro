import numpy as np
import matplotlib.pyplot as plt
import sounddevice as sd

def ema_filter(x, alpha):
    """Aplica un filtro de media móvil exponencial (EMA) a la señal."""
    y = np.zeros_like(x)
    y[0] = x[0]
    for i in range(1, len(x)):
        y[i] = alpha * x[i] + (1 - alpha) * y[i-1]
    return y

def fourier_calculation(y, sample_rate):
    """Calcula la transformada rápida de Fourier (FFT) de la señal."""
    n = len(y)
    yf = np.fft.fft(y)
    xf = np.fft.fftfreq(n, 1 / sample_rate)
    return np.abs(yf[:n//2]), xf[:n//2]

def plot_signals(t, original, smooth_06, smooth_02, smooth_005, sample_rate):
    """Plotea la señal original y las suavizadas, junto con el espectro de frecuencias."""
    plt.figure(figsize=(15, 10))
    
    # Señal en el dominio del tiempo
    plt.subplot(2, 1, 1)
    plt.plot(t, original, label='Original')
    plt.plot(t, smooth_06, label='Suavizada (alpha=0.6)', linestyle='--')
    plt.plot(t, smooth_02, label='Suavizada (alpha=0.2)', linestyle='--')
    plt.plot(t, smooth_005, label='Suavizada (alpha=0.05)', linestyle='--')
    plt.title('Señal Original y Suavizadas')
    plt.xlabel('Tiempo [s]')
    plt.ylabel('Amplitud')
    plt.legend()
    plt.grid()
    
    # Espectro de frecuencias
    plt.subplot(2, 1, 2)
    yf_original, xf = fourier_calculation(original, sample_rate)
    yf_06, _ = fourier_calculation(smooth_06, sample_rate)
    yf_02, _ = fourier_calculation(smooth_02, sample_rate)
    yf_005, _ = fourier_calculation(smooth_005, sample_rate)
    plt.plot(xf, yf_original, label='Original')
    plt.plot(xf, yf_06, label='Suavizada (alpha=0.6)', linestyle='--')
    plt.plot(xf, yf_02, label='Suavizada (alpha=0.2)', linestyle='--')
    plt.plot(xf, yf_005, label='Suavizada (alpha=0.05)', linestyle='--')
    plt.title('Espectro de Frecuencias')
    plt.xlabel('Frecuencia [Hz]')
    plt.ylabel('Magnitud')
    plt.xlim([0, 3000])  # Limitando el rango de frecuencias para mejor visualización
    plt.legend()
    plt.grid()
    
    plt.tight_layout()
    plt.show()

# Configuración de parámetros
duration = 5  # Duración en segundos
sample_rate = 1000  # Frecuencia de muestreo

# Captura de audio
print("Comenzando la grabación...")
audio = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='float64')
sd.wait()
audio = audio.flatten()  # Aplanar la señal capturada
print("Grabación finalizada")

# Ejes de tiempo
t = np.linspace(0, duration, len(audio))

# Aplicar el filtro EMA con diferentes valores de alpha
alpha_06 = 0.6
alpha_02 = 0.2
alpha_005 = 0.05
smooth_06 = ema_filter(audio, alpha_06)
smooth_02 = ema_filter(audio, alpha_02)
smooth_005 = ema_filter(audio, alpha_005)

# Visualizar la señal original y las suavizadas
plot_signals(t, audio, smooth_06, smooth_02, smooth_005, sample_rate)
