import numpy as np
import matplotlib.pyplot as plt

def string_to_bin(message):
    """
    Convierte un mensaje de texto en una secuencia binaria.
    Cada carácter se convierte en su representación binaria de 8 bits.
    """
    return ''.join(format(ord(char), '08b') for char in message)

def nrz_encoding(binary_data):
    """
    Codifica la secuencia binaria usando NRZ.
    NRZ: 1 se representa como un nivel alto, 0 como un nivel bajo.
    """
    encoded_signal = []
    for bit in binary_data:
        if bit == '1':
            encoded_signal.append(1)  # Nivel alto
        else:
            encoded_signal.append(0)  # Nivel bajo
    return encoded_signal

# Mensaje para transmitir
message = "Hola como estas"

# Paso 1: Convertir el mensaje en binario
binary_data = string_to_bin(message)
print(f"Mensaje original: {message}")
print(f"Mensaje en binario: {binary_data}")

# Paso 2: Codificar el mensaje binario usando NRZ
nrz_signal = nrz_encoding(binary_data)
print("Señal codificada (NRZ):")
print(nrz_signal)

# ====================
#  Generación de g[n]
# ====================

fB = 32e9    # Velocidad de simbolos (baud rate)
T = 1 / fB   # Tiempo entre símbolos
M = 8        # Factor de sobremuestreo
fs = fB * M  # Sample rate

alpha = 0.1  # Factor de roll-off
L = 20       # (2 * L * M + 1) es el largo del filtro sobremuestreado

t = np.arange(-L, L, 1 / M) * T
gn = np.sinc(t / T) * np.cos(np.pi * alpha * t / T) / (1 - 4 * alpha**2 * t**2 / T**2)

params = { 
    'legend.fontsize': 'large',
    'figure.figsize': (15, 6),
    'axes.labelsize': 20,
    'axes.titlesize': 20,
    'xtick.labelsize': 15,
    'ytick.labelsize': 15,
    'axes.titlepad': 30 
}
plt.rcParams.update(params)

fig, ax = plt.subplots()
x1_ejeVertical, y1_ejeVertical = [0, 0], [0, 1.5]
ax.plot(x1_ejeVertical, y1_ejeVertical, linewidth=2.5, color='black')
ax.scatter(x1_ejeVertical[1], y1_ejeVertical[1], marker="^", color='black', s=150)
x1_ejeHorizontal, y1_ejeHorizontal = [-5*T, 4.9*T], [0, 0]
ax.plot(x1_ejeHorizontal, y1_ejeHorizontal, linewidth=2.5, color='black')

ax.stem(t, gn)
ax.set_title('Filtro transmisor')

plt.text(T/6, 1.45, r'$g_{[n]}$', fontsize=25, color='black')
plt.text(5.2*T, 0, r'$n$', fontsize=25, color='black')

abcisas = [-5*T, -4*T, -3*T, -2*T, -T, 0, T/2, T, 2*T, 3*T, 4*T, 5*T]
textos_abcisas = ['-5T', '-4T', r'$-3T$', '-2T', '-T', '0', r'$\frac{1}{2} \ T$', 'T', '2T', '3T', '4T', '5T']
plt.xticks(abcisas, textos_abcisas)
ordenadas = [0, 1]
textos_ordenadas = ['0', '1']
plt.yticks(ordenadas, textos_ordenadas)
plt.xlim([-5*T, 5*T])

plt.show()

# ============================
#  Paso 3: Convolución de la señal NRZ con el filtro
# ============================

# Expandimos la señal NRZ para que coincida con el factor de sobremuestreo M
nrz_signal_oversampled = np.repeat(nrz_signal, M)

# Mostrar la señal NRZ sobremuestreada antes del filtrado
fig, ax = plt.subplots()

ax.plot(nrz_signal_oversampled, color='green')
ax.set_title("Señal NRZ sobremuestreada antes del filtro transmisor")
ax.set_xlabel("Tiempo (muestras)")
ax.set_ylabel("Amplitud")

plt.show()

# Convolucionamos la señal NRZ sobremuestreada con el filtro g[n]
transmitted_signal = np.convolve(nrz_signal_oversampled, gn, mode='same')

# ============================
#  Visualización de la señal transmitida
# ============================

# Graficar la señal transmitida
fig, ax = plt.subplots()

ax.plot(transmitted_signal, color='blue')
ax.set_title("Señal transmitida después del filtro transmisor")
ax.set_xlabel("Tiempo (muestras)")
ax.set_ylabel("Amplitud")

plt.show()

